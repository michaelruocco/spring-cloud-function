service: spring-cloud-function

custom:
  defaultStage: dev
  defaultRegion: eu-west-1
  defaultVersion: 1.0.0-SNAPSHOT

  stage: ${opt:stage, self:custom.defaultStage}
  region: ${opt:region, self:custom.defaultRegion}
  version: ${opt:version, self:custom.defaultVersion}

  lambdas:
    getWidget:
      name: ${self:custom.stage}-getWidget

    getWidgets:
      name: ${self:custom.stage}-getWidgets

    postWidget:
      name: ${self:custom.stage}-postWidget

    deleteWidget:
      name: ${self:custom.stage}-deleteWidget

  dynamoTables:
    widget:
      name: ${self:custom.stage}-widget
      arn: { "Fn::Join" : ["", ["arn:aws:dynamodb:${self:custom.region}:", { "Ref" : "AWS::AccountId" }, ":table/${self:custom.dynamoTables.widget.name}" ] ] }

provider:
  name: aws
  runtime: java8
  stage: ${self:custom.stage}
  region: ${self:custom.region}
  timeout: 20
  environment:
    STAGE: ${self:custom.stage}
    REGION: ${self:custom.region}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:Scan
      Resource: ${self:custom.dynamoTables.widget.arn}

package:
  artifact: target/spring-cloud-function-${self:custom.version}-aws.jar

functions:
  getWidget:
    environment:
      FUNCTION_NAME: 'getWidget'
    handler: uk.co.mruoc.CloudHandler
    name: ${self:custom.lambdas.getWidget.name}
    events:
      - http:
          path: widgets/{id}
          method: get

  getWidgets:
    environment:
      FUNCTION_NAME: 'getWidgets'
    handler: uk.co.mruoc.CloudHandler
    name: ${self:custom.lambdas.getWidgets.name}
    events:
      - http:
          path: widgets
          method: get

  postWidget:
    environment:
      FUNCTION_NAME: 'postWidget'
    handler: uk.co.mruoc.CloudHandler
    name: ${self:custom.lambdas.postWidget.name}
    events:
      - http:
          path: widgets
          method: post

  deleteWidget:
    environment:
      FUNCTION_NAME: 'deleteWidget'
    handler: uk.co.mruoc.CloudHandler
    name: ${self:custom.lambdas.deleteWidget.name}
    events:
      - http:
          path: widgets/{id}
          method: delete

resources:
  Resources:

    widgetTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.dynamoTables.widget.name}