package uk.co.mruoc.model;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTypeConverted;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import uk.co.mruoc.repository.MonetaryAmountTypeConverter;

import javax.money.MonetaryAmount;
import java.util.UUID;

@DynamoDBTable(tableName = "widget")
@ToString
@EqualsAndHashCode
public class Widget {

    private UUID id;
    private String description;
    private MonetaryAmount cost;
    private MonetaryAmount price;

    public Widget() {
        // intentionally blank
    }

    public Widget(UUID id, String description, MonetaryAmount cost, MonetaryAmount price) {
        this.id = id;
        this.description = description;
        this.cost = cost;
        this.price = price;
    }

    @DynamoDBHashKey
    @DynamoDBAutoGeneratedKey
    public UUID getId() {
        return id;
    }

    public void setId(UUID id) {
        this.id = id;
    }

    @DynamoDBAttribute
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public boolean hasDescription() {
        return description != null;
    }

    @DynamoDBAttribute
    @DynamoDBTypeConverted(converter = MonetaryAmountTypeConverter.class)
    public MonetaryAmount getCost() {
        return cost;
    }

    public void setCost(MonetaryAmount cost) {
        this.cost = cost;
    }

    public boolean hasCost() {
        return cost != null;
    }

    @DynamoDBAttribute
    @DynamoDBTypeConverted(converter = MonetaryAmountTypeConverter.class)
    public MonetaryAmount getPrice() {
        return price;
    }

    public void setPrice(MonetaryAmount price) {
        this.price = price;
    }

    public boolean hasPrice() {
        return price != null;
    }

    public Widget update(Widget widget) {
        final Widget updatedWidget = new Widget();
        updatedWidget.setId(id);
        updatedWidget.setDescription(widget.hasDescription() ? widget.getDescription() : description);
        updatedWidget.setCost(widget.hasCost() ? widget.getCost() : cost);
        updatedWidget.setPrice(widget.hasPrice() ? widget.getPrice() : price);
        return updatedWidget;
    }

}
